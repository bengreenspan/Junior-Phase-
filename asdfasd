const Sequelize = require('sequelize');
  const { UUID, UUIDV4, STRING } = Sequelize;
  const conn = new Sequelize(process.env.DATABASE_URL || 'postgres://localhost/juniordb');


  const Student = conn.define('student', {
    id: {
      primaryKey: true,
      type: UUID,
      defaultValue: UUIDV4
    },
    name: {
      type: STRING,
      allowNull: false,
      validate: {
        notEmpty: true,
      },
    },
    lastName: {
      type: STRING,
      allowNull: false,
      validate: {
        notEmpty: true,
      },
    },
    email: {
      type: STRING,
      allowNull: false,
      validate: {
        notEmpty: true,
        isEmail: true,
      },
    }



  });
  
  const Campus = conn.define('campus', {  
    id: {
      primaryKey: true,
      type: UUID,
      defaultValue: UUIDV4
  },
  campusName: {
    type: STRING,
    allowNull: false,
    validate: {
      notEmpty: true,
    },
  },
  campusAddress: {
      type: STRING,
      allowNull: false,
      validate: {
        notEmpty: true,
      }
    }
    });

  



Student.belongsTo(Campus);
Campus.hasMany(Student)

 const syncAndSeed = async()=> {
    await conn.sync({ force: true });
    const campuses = [
      {campusName: 'Blue Mountain State', campusAddress: '100 penn'}, 
      {campusName: 'South Harmon Institute of Technology', campusAddress: 'test2'},
      {campusName: 'Faber College', campusAddress: 'testting testy'},
      {campusName: 'Dartmouth', campusAddress: 'test a a check'},
      {campusName: 'East Great Falls', campusAddress: 'checking'},];
    const [Blue_Mountain_State, South_Harmon_Institute_of_Technology, Faber_College, Dartmouth, East_Great_Falls] = await Promise.all(campuses.map(campus => Campus.create({ name: campus} )));
    const students = [
      { name: 'Thad', lastName:'Castle', email:'tcastle1@bms.edu', campusId: Blue_Mountain_State.id}, 
      { name: 'Alex', lastName:'Moran', email:'amoran6@bms.edu', campusId: Blue_Mountain_State.id}, 
      { name: 'Steve', lastName:'Stifler',  email:'stifler70@hotmail.com', campusId: East_Great_Falls.id}, 
      { name: 'Otter', lastName:'Stratton', email:'EricStratton@gmail.com', campusId: Faber_College.id}, 
      { name: 'Bartleby', lastName: 'Gaines', email:'bgaines1@shit.edu', campusId: South_Harmon_Institute_of_Technology.id}, 
    ];
    await Promise.all(students.map(name => Student.create({ name: name.name, lastName: name.lastName, email: name.email, campusId: name.campusId })));
       
  };

